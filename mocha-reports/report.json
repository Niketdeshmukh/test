{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-17T12:57:21.866Z",
    "end": "2024-12-17T12:57:31.784Z",
    "duration": 9918,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d6accf4b-665a-4744-81cc-b84573343f89",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bef079e1-bc74-496d-860d-a664cc3e581f",
          "title": "Orientation Test",
          "fullFile": "/home/niketdeshmukh/Desktop/TEST/tests/cases/masterSuite.test.mjs",
          "file": "/cases/masterSuite.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Orientation Test\"",
              "fullTitle": "Orientation Test \"before all\" hook in \"Orientation Test\"",
              "timedOut": false,
              "duration": 4864,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000); // Set timeout for the setup\nconst capabilities = {\n  platformName: 'Android',\n  'appium:deviceName': 'emulator-5554',\n  'appium:app': './dev-release.apk',\n  'appium:automationName': 'UiAutomator2',\n  'appium:newCommandTimeout': 300,\n  'appium:noReset': true,\n  'appium:ignoreHiddenApiPolicyError': true,\n};\ndriver = await remote({\n  logLevel: 'info',\n  path: '/',\n  port: 4725,\n  capabilities,\n});\nconsole.log('Driver setup complete, waiting for the app to load...');\nawait driver.pause(2000);",
              "err": {},
              "uuid": "2b502933-2832-4bda-8d7c-d316ad739230",
              "parentUUID": "bef079e1-bc74-496d-860d-a664cc3e581f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Orientation Test\"",
              "fullTitle": "Orientation Test \"after all\" hook in \"Orientation Test\"",
              "timedOut": false,
              "duration": 1165,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Ending the orientation test session...');\n// Ensure the orientation is set back to portrait before ending the session\nconst currentOrientation = await driver.getOrientation();\nif (currentOrientation !== 'PORTRAIT') {\n  console.log('Resetting orientation to portrait...');\n  await driver.setOrientation('PORTRAIT');\n}\nif (driver) {\n  await driver.deleteSession();\n  console.log('Driver session closed.');\n} else {\n  console.log('Driver session not created. Skipping session cleanup.');\n}",
              "err": {},
              "uuid": "05f7349f-0dab-444b-be3a-167507499cda",
              "parentUUID": "bef079e1-bc74-496d-860d-a664cc3e581f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should verify orientation and switch between portrait and landscape",
              "fullTitle": "Orientation Test should verify orientation and switch between portrait and landscape",
              "timedOut": false,
              "duration": 3883,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Launching the app...');\nlet currentOrientation = await driver.getOrientation();\nconsole.log(`Initial Orientation: ${currentOrientation}`);\n// Ensure initial orientation is portrait\nif (currentOrientation !== 'PORTRAIT') {\n  console.log('Switching to portrait mode...');\n  await driver.setOrientation('PORTRAIT');\n}\nconsole.log('Enabling auto-rotate feature...');\ntry {\n  await driver.execute('mobile: shell', {\n    command: 'settings put system accelerometer_rotation 1',\n  });\n} catch (err) {\n  console.warn('Could not enable auto-rotate programmatically.');\n}\nconsole.log('Attempting to switch to landscape mode...');\nawait delay(1000); // Adding delay before orientation change\nawait driver.setOrientation('LANDSCAPE');\ncurrentOrientation = await driver.getOrientation();\nconsole.log(`Orientation after switching to landscape: ${currentOrientation}`);\nexpect(currentOrientation).to.equal('LANDSCAPE', 'Failed to switch to landscape mode.');\nconsole.log('Switching back to portrait mode...');\nawait driver.setOrientation('PORTRAIT');\ncurrentOrientation = await driver.getOrientation();\nconsole.log(`Orientation after switching back to portrait: ${currentOrientation}`);\nexpect(currentOrientation).to.equal('PORTRAIT', 'Failed to switch back to portrait mode.');",
              "err": {},
              "uuid": "ea2196f4-2319-42c6-9122-84c10a403c51",
              "parentUUID": "bef079e1-bc74-496d-860d-a664cc3e581f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea2196f4-2319-42c6-9122-84c10a403c51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3883,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f73b2193-f498-4bb6-afa9-35e12d0a777a",
          "title": "Complete Test Suite",
          "fullFile": "/home/niketdeshmukh/Desktop/TEST/tests/cases/masterSuite.test.mjs",
          "file": "/cases/masterSuite.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should run all test files in sequence",
              "fullTitle": "Complete Test Suite should run all test files in sequence",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('All tests are imported and will run sequentially.');",
              "err": {},
              "uuid": "c18896ec-ba3c-4db3-bf61-20fd9e28deed",
              "parentUUID": "f73b2193-f498-4bb6-afa9-35e12d0a777a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c18896ec-ba3c-4db3-bf61-20fd9e28deed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mocha-reports",
        "reportFilename": "report",
        "verbose": true
      },
      "version": "5.2.0"
    }
  }
}